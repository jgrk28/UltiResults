#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const fs = require('fs');
const { Server } = require('socket.io');
const Controller = require('../Controller');

// redirect stdout / stderr
var output = fs.createWriteStream(process.env.LOGS_DIR + '/output.log', { flags: 'a' })
var error = fs.createWriteStream(process.env.LOGS_DIR + '/error.log', { flags: 'a' });
process.stdout.write = output.write.bind(output);
process.stderr.write = error.write.bind(error);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server that can accept websocket connections
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: [
      "http://52.69.100.53",
      "http://frisbeeresults.live",
      "http://www.frisbeeresults.live",
      "https://52.69.100.53",
      "https://frisbeeresults.live",
      "https://www.frisbeeresults.live",
      "http://localhost",
      "http://localhost:3000",
    ],
    methods: ["GET", "POST"]
  }
});
Controller.startBackend(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`server listening on ${bind}`)
}
